// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetBook.Data;

namespace PetBook.Migrations
{
    [DbContext(typeof(PetbookContext))]
    [Migration("20200518172036_Registry")]
    partial class Registry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetBook.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnName("Appointment ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnName("Appointment Date")
                        .HasColumnType("datetime");

                    b.Property<string>("AppointmentDescription")
                        .HasColumnName("Appointment Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("PetBook.Models.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .HasColumnName("Calendar ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EntryActionDate")
                        .HasColumnName("Entry Action Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EntryCreated")
                        .HasColumnName("Entry Created")
                        .HasColumnType("datetime");

                    b.Property<string>("EntryNotes")
                        .HasColumnName("Entry Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryTitle")
                        .HasColumnName("Entry Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalendarId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("PetBook.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnName("Client ID")
                        .HasColumnType("int");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnName("Client phone Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientProfileImagePath")
                        .HasColumnName("Client Profile Image Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfProfileCreation")
                        .HasColumnName("Date of Profile Creation")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("First Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Last Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnName("Middle Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownOrCity")
                        .IsRequired()
                        .HasColumnName("Town or City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEMail")
                        .IsRequired()
                        .HasColumnName("User E-mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserStreetAddress")
                        .IsRequired()
                        .HasColumnName("User Street Address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PetBook.Models.ClientPet", b =>
                {
                    b.Property<int>("IdexNumber")
                        .HasColumnName("Idex Number")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnName("Client ID")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnName("Pet ID")
                        .HasColumnType("int");

                    b.HasKey("IdexNumber")
                        .HasName("PK__ClientPe__36E7A3C7B4B929B0");

                    b.HasIndex("ClientId");

                    b.HasIndex("PetId");

                    b.ToTable("ClientPet");
                });

            modelBuilder.Entity("PetBook.Models.ClientVet", b =>
                {
                    b.Property<int>("IdexNumber")
                        .HasColumnName("Idex Number")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnName("Client ID")
                        .HasColumnType("int");

                    b.Property<int?>("VetId")
                        .HasColumnName("Vet ID")
                        .HasColumnType("int");

                    b.HasKey("IdexNumber")
                        .HasName("PK__ClientVe__36E7A3C7F62723EE");

                    b.HasIndex("ClientId");

                    b.HasIndex("VetId");

                    b.ToTable("ClientVet");
                });

            modelBuilder.Entity("PetBook.Models.MedicalFile", b =>
                {
                    b.Property<int>("MedicalFileId")
                        .HasColumnName("Medical File ID")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentId")
                        .HasColumnName("Appointment ID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationId")
                        .HasColumnName("Medication ID")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnName("Pet ID")
                        .HasColumnType("int");

                    b.Property<int?>("ProcedureId")
                        .HasColumnName("Procedure ID")
                        .HasColumnType("int");

                    b.Property<int?>("VaccinationId")
                        .HasColumnName("Vaccination ID")
                        .HasColumnType("int");

                    b.HasKey("MedicalFileId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PetId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("VaccinationId");

                    b.ToTable("MedicalFile");
                });

            modelBuilder.Entity("PetBook.Models.MedicalProcedure", b =>
                {
                    b.Property<int>("ProcedureId")
                        .HasColumnName("Procedure ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcedureDate")
                        .IsRequired()
                        .HasColumnName("Procedure Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcedureFollowUp")
                        .IsRequired()
                        .HasColumnName("Procedure Follow Up")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcedureNotes")
                        .IsRequired()
                        .HasColumnName("Procedure Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureType")
                        .IsRequired()
                        .HasColumnName("Procedure Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcedureId")
                        .HasName("PK__MedicalP__98B85A155757579E");

                    b.ToTable("MedicalProcedure");
                });

            modelBuilder.Entity("PetBook.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .HasColumnName("Medication ID")
                        .HasColumnType("int");

                    b.Property<string>("MedicationDescription")
                        .IsRequired()
                        .HasColumnName("Medication Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationDirections")
                        .IsRequired()
                        .HasColumnName("Medication Directions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MedicationIssueDate")
                        .IsRequired()
                        .HasColumnName("Medication Issue Date")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnName("Medication Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MedicationsRefillDate")
                        .IsRequired()
                        .HasColumnName("Medications Refill Date")
                        .HasColumnType("datetime");

                    b.HasKey("MedicationId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("PetBook.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnName("Pet ID")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PetBreed")
                        .IsRequired()
                        .HasColumnName("Pet Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetImage")
                        .HasColumnName("Pet Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnName("Pet Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetProfileImagePath")
                        .HasColumnName("Pet Profile Image Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetSex")
                        .IsRequired()
                        .HasColumnName("Pet Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetSpecies")
                        .IsRequired()
                        .HasColumnName("Pet Species")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("PetBook.Models.PetCalendar", b =>
                {
                    b.Property<int>("IdexNumber")
                        .HasColumnName("Idex Number")
                        .HasColumnType("int");

                    b.Property<int?>("CalendarId")
                        .HasColumnName("Calendar ID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalFileId")
                        .HasColumnName("Medical File ID")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnName("Pet ID")
                        .HasColumnType("int");

                    b.HasKey("IdexNumber")
                        .HasName("PK__PetCalen__36E7A3C7BD7B7EAA");

                    b.HasIndex("CalendarId");

                    b.HasIndex("MedicalFileId");

                    b.HasIndex("PetId");

                    b.ToTable("PetCalendar");
                });

            modelBuilder.Entity("PetBook.Models.PetMed", b =>
                {
                    b.Property<int>("IdexNumber")
                        .HasColumnName("Idex Number")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalFileId")
                        .HasColumnName("Medical File ID")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnName("Pet ID")
                        .HasColumnType("int");

                    b.HasKey("IdexNumber")
                        .HasName("PK__PetMed__36E7A3C746D9B238");

                    b.HasIndex("MedicalFileId");

                    b.HasIndex("PetId");

                    b.ToTable("PetMed");
                });

            modelBuilder.Entity("PetBook.Models.Vaccination", b =>
                {
                    b.Property<int>("VaccinationId")
                        .HasColumnName("VACCINATION ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VaccinationDate")
                        .IsRequired()
                        .HasColumnName("Vaccination Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VaccinationExpiryDate")
                        .IsRequired()
                        .HasColumnName("Vaccination Expiry Date")
                        .HasColumnType("datetime");

                    b.Property<string>("VaccinationName")
                        .IsRequired()
                        .HasColumnName("Vaccination Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccinationNotes")
                        .IsRequired()
                        .HasColumnName("Vaccination Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccinationType")
                        .IsRequired()
                        .HasColumnName("Vaccination Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VaccinationId");

                    b.ToTable("Vaccination");
                });

            modelBuilder.Entity("PetBook.Models.Veterinarian", b =>
                {
                    b.Property<int>("VetId")
                        .HasColumnName("Vet ID")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownOrCity")
                        .IsRequired()
                        .HasColumnName("Town or City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetEMail")
                        .IsRequired()
                        .HasColumnName("Vet E-mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetName")
                        .IsRequired()
                        .HasColumnName("Vet Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetPhoneNumber")
                        .IsRequired()
                        .HasColumnName("Vet phone Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetProfileImagePath")
                        .HasColumnName("Vet Profile Image Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetStreetAddress")
                        .IsRequired()
                        .HasColumnName("Vet Street Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("VetId")
                        .HasName("PK__Veterina__7774A44E6F225AC9");

                    b.ToTable("Veterinarian");
                });

            modelBuilder.Entity("PetBook.Models.ClientPet", b =>
                {
                    b.HasOne("PetBook.Models.Client", "Client")
                        .WithMany("ClientPet")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__ClientPet__Clien__2E1BDC42");

                    b.HasOne("PetBook.Models.Pet", "Pet")
                        .WithMany("ClientPet")
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK__ClientPet__Pet I__2F10007B");
                });

            modelBuilder.Entity("PetBook.Models.ClientVet", b =>
                {
                    b.HasOne("PetBook.Models.Client", "Client")
                        .WithMany("ClientVet")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__ClientVet__Clien__30F848ED");

                    b.HasOne("PetBook.Models.Veterinarian", "Vet")
                        .WithMany("ClientVet")
                        .HasForeignKey("VetId")
                        .HasConstraintName("FK__ClientVet__Vet I__300424B4");
                });

            modelBuilder.Entity("PetBook.Models.MedicalFile", b =>
                {
                    b.HasOne("PetBook.Models.Appointment", "Appointment")
                        .WithMany("MedicalFile")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__MedicalFi__Appoi__31EC6D26");

                    b.HasOne("PetBook.Models.Medication", "Medication")
                        .WithMany("MedicalFile")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK__MedicalFi__Medic__33D4B598");

                    b.HasOne("PetBook.Models.Pet", "Pet")
                        .WithMany("MedicalFile")
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK__MedicalFi__Pet I__35BCFE0A");

                    b.HasOne("PetBook.Models.MedicalProcedure", "Procedure")
                        .WithMany("MedicalFile")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("FK__MedicalFi__Proce__32E0915F");

                    b.HasOne("PetBook.Models.Vaccination", "Vaccination")
                        .WithMany("MedicalFile")
                        .HasForeignKey("VaccinationId")
                        .HasConstraintName("FK__MedicalFi__Vacci__34C8D9D1");
                });

            modelBuilder.Entity("PetBook.Models.PetCalendar", b =>
                {
                    b.HasOne("PetBook.Models.Calendar", "Calendar")
                        .WithMany("PetCalendar")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK__PetCalend__Calen__2B3F6F97");

                    b.HasOne("PetBook.Models.MedicalFile", "MedicalFile")
                        .WithMany("PetCalendar")
                        .HasForeignKey("MedicalFileId")
                        .HasConstraintName("FK__PetCalend__Medic__29572725");

                    b.HasOne("PetBook.Models.Pet", "Pet")
                        .WithMany("PetCalendar")
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK__PetCalend__Pet I__2A4B4B5E");
                });

            modelBuilder.Entity("PetBook.Models.PetMed", b =>
                {
                    b.HasOne("PetBook.Models.MedicalFile", "MedicalFile")
                        .WithMany("PetMed")
                        .HasForeignKey("MedicalFileId")
                        .HasConstraintName("FK__PetMed__Medical __2D27B809");

                    b.HasOne("PetBook.Models.Pet", "Pet")
                        .WithMany("PetMed")
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK__PetMed__Pet ID__2C3393D0");
                });
#pragma warning restore 612, 618
        }
    }
}
